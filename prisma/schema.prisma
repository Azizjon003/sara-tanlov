// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum RoleEnum {
  ADMIN
  USER
}

model User {
  id       String  @id @default(uuid())
  username  String?
  name      String?
  role      RoleEnum @default(USER)
  telegram_id String @unique
  isActive  Boolean @default(true)
  region    String?
  phone     String? @unique
  codes     user_codes[]
  receivedGifts UserGift[]
  session     UserSession[]
  gameParticipations UserGameParticipation[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


model message {
  id        String  @id @default(uuid())
  link      String
  type      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


model channels {
  id        String  @id @default(uuid())
  name      String
  link      String
  type      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model code {
  id        String  @id @default(uuid())
  code      String   @unique
  isUsed    Boolean @default(false)
  user_codes user_codes[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


model user_codes {
  id       String  @id @default(uuid())
  user_id   String
  code_id   String  @unique
  user      User    @relation(fields: [user_id], references: [id])
  code      code    @relation(fields: [code_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Gift {
  id          String       @id @default(uuid())
  name        String
  description String?
  value       Int
  quantity    Int
  isAvailable Boolean      @default(true)
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userGifts   UserGift[]
}

model UserGift {
  id        String   @id @default(uuid())
  userId    String
  giftId    String
  receivedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  gift      Gift     @relation(fields: [giftId], references: [id])
  gameWeek  GameWeek @relation(fields: [gameWeekId], references: [id])
  gameWeekId String
}


model UserSession {
  id            String   @id @default(uuid())
  userId        String   @unique
  enteredCode   String?  @unique
  lastAttemptAt DateTime @updatedAt
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model GameWeek {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  userGifts UserGift[]
  userGameParticipations UserGameParticipation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGameParticipation {
  id        String   @id @default(uuid())
  userId    String
  gameWeekId String
  hasParticipated Boolean @default(false)
  user      User     @relation(fields: [userId], references: [id])
  gameWeek  GameWeek @relation(fields: [gameWeekId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, gameWeekId])
}